if(length(words) < 30 & sum(known) != 0){
subwords <- strsplit(words, "")                                           # Split letters
# tmp <- rep(NA, length(words))                                             # Take letters from dictionary where we don't know the true letter
tmp <- list()
for(i in 1:length(words)) tmp[[i]] <- subwords[[i]][!((1:size) %in% pos[known == 1])]
# dsub <- d[!(d %in% words)]                                                # Dictionary words that are not remaining
dsub <- d
for(i in 1:length(unique(pos[known == 1]))){
position <- unique(pos[known == 1])[i]                                  # Take the i'th position we know
# Take the words in dsub where the i'th letter is not the i'th known letter
dsub <- dsub[substr(dsub, position, position) != unique(substr(words, position, position))]
}
dsub <- dsub[nchar(dsub) > 0]
howmany <- rep(NA, length(dsub))
for(i in 1:length(dsub)){
howmany[i] <- checkword(dsub[i], tmp)                                   # How many words have letters similar to word i in dsub
}
if(any(dsub[howmany == max(howmany)] %in% words)){
cat("Optimal word:", dsub[howmany == max(howmany) & dsub[howmany == max(howmany)] %in% words][1], "\n")
}
else{
most <- which(howmany == max(howmany))                                    # Which hits most?
# Take dsub with the right length
test <- if(length(most) != 0) lapply(strsplit(dsub[most], ""), function(i) length(unique(i))) == size else F
# cat("Word:", ifelse(any(test == 1), words[match(1, test)], words[1]), "\n")
if(any(test == 1)){
cat("Optimal word:", sample(dsub[most[which(test == 1)]], 1), "\n")
}
else{
cat("Optimal word:", sample(dsub[most],1), "\n")
}
}
}
}
correct <- readline(prompt = "Correct? ")
if(!as.logical(correct)){
notinAdd <- readline(prompt = "notin? ")
containsAdd <- readline(prompt = "contains? ")
knownAdd <- readline(prompt = "known? ")
posAdd <- readline(prompt = "pos? ")
notin <- paste(c(notin, notinAdd), collapse = "")
contains <- paste(c(contains, containsAdd), collapse = "")
known <- paste(c(known, knownAdd), collapse = "")
pos <- paste(c(pos, posAdd), collapse = "")
mysubset(d, size = size, notin = notin, contains = contains, known = known, pos = pos, bestWord = TRUE)
}
else{
cat("You're welcome!")
}
# cat("Words: ", words[1:5], "\n")
}
checkword <- function(word, dictionary){
word <- paste0("(", paste0(strsplit(word, "")[[1]], collapse = ")|("), ")")
sum(grepl(word, dictionary))
}
mysubset(words, size = 5, bestWord = FALSE)
(6/7)^5
library(stringr)
d <- words::words
words <- tolower(d[,1])
mysubset <- function(d, size = 5, notin = NULL, contains = NULL, known = NULL, pos = NULL, bestWord = FALSE){
words <- d[nchar(d) == size]
words <- d <- words[!unlist(if(length(words) != 0) lapply(strsplit(words, ""), function(i) any(i %in% c("-", " ", "/", ".") )) else character(0))]
if(!is.null(notin) & !is.null(contains)) notin <- paste(setdiff(strsplit(notin, "")[[1]], strsplit(contains, "")[[1]]), collapse = "")
if(!is.null(notin)){
notin <- strsplit(notin, "")[[1]]
for(i in 1:length(notin)){
words <- words[!str_detect(words, notin[i])]
}
}
if(!is.null(contains) && !identical(contains, "")){
contains <- strsplit(contains, "")[[1]]
known <- as.numeric(strsplit(known, "")[[1]])
pos <- as.numeric(strsplit(pos, "")[[1]])
if(length(contains) != length(known) | length(known) != length(pos)){
warning("contains, known, and pos must have equal length")
}
for(i in 1:length(contains)){
if(known[i]){
words <- words[substr(words, pos[i], pos[i]) == contains[i]]
}
else{
words <- words[substr(words, pos[i], pos[i]) != contains[i]]
words <- words[str_detect(words, contains[i])]
}
}
}
cat("Number of words:", length(words), "\n")
# test <- if(length(words) != 0) lapply(strsplit(words, ""), function(i) length(unique(i))) == length else F
if(bestWord){
subwords <- strsplit(words, "")                                           # Split letters
tmp <- list()
for(i in 1:length(words)) tmp[[i]] <- subwords[[i]][!(subwords[[i]] %in% contains)]
dsub <- d
howmany <- rep(NA, length(words))
for(i in 1:length(words)){
howmany[i] <- checkword(words[i], tmp)
}
most <- which(howmany == max(howmany))
test <- if(length(most) != 0) lapply(strsplit(words[most], ""), function(i) length(unique(i))) == size else F
# cat("Word:", ifelse(any(test == 1), words[match(1, test)], words[1]), "\n")
if(any(test == 1)){
cat("Word from dictionary:", sample(words[most[which(test == 1)]], 1), "\n")
}
else{
cat("Word from dictionary:", sample(words[most], 1), "\n")
}
# cat("Word:", ifelse(any(test == 1), words[most[which(test == 1)]], words[most]), "\n")
}
if(!is.null(known) && !identical(known, "")){
# if(length(unique(pos[known == 1])) == (size - 1) & length(words) >= 3){     # If all but one are known, and more than three words are left
if(length(words) < 30 & sum(known) != 0){
subwords <- strsplit(words, "")                                           # Split letters
# tmp <- rep(NA, length(words))                                             # Take letters from dictionary where we don't know the true letter
tmp <- list()
for(i in 1:length(words)) tmp[[i]] <- subwords[[i]][!((1:size) %in% pos[known == 1])]
# dsub <- d[!(d %in% words)]                                                # Dictionary words that are not remaining
dsub <- d
for(i in 1:length(unique(pos[known == 1]))){
position <- unique(pos[known == 1])[i]                                  # Take the i'th position we know
# Take the words in dsub where the i'th letter is not the i'th known letter
dsub <- dsub[substr(dsub, position, position) != unique(substr(words, position, position))]
}
dsub <- dsub[nchar(dsub) > 0]
howmany <- rep(NA, length(dsub))
for(i in 1:length(dsub)){
howmany[i] <- checkword(dsub[i], tmp)                                   # How many words have letters similar to word i in dsub
}
if(any(dsub[howmany == max(howmany)] %in% words)){
cat("Optimal word:", dsub[howmany == max(howmany) & dsub[howmany == max(howmany)] %in% words][1], "\n")
}
else{
most <- which(howmany == max(howmany))                                    # Which hits most?
# Take dsub with the right length
test <- if(length(most) != 0) lapply(strsplit(dsub[most], ""), function(i) length(unique(i))) == size else F
# cat("Word:", ifelse(any(test == 1), words[match(1, test)], words[1]), "\n")
if(any(test == 1)){
cat("Optimal word:", sample(dsub[most[which(test == 1)]], 1), "\n")
}
else{
cat("Optimal word:", sample(dsub[most],1), "\n")
}
}
}
}
correct <- readline(prompt = "Correct? ")
if(!as.logical(correct)){
notinAdd <- readline(prompt = "notin? ")
containsAdd <- readline(prompt = "contains? ")
knownAdd <- readline(prompt = "known? ")
posAdd <- readline(prompt = "pos? ")
notin <- paste(c(notin, notinAdd), collapse = "")
contains <- paste(c(contains, containsAdd), collapse = "")
known <- paste(c(known, knownAdd), collapse = "")
pos <- paste(c(pos, posAdd), collapse = "")
mysubset(d, size = size, notin = notin, contains = contains, known = known, pos = pos, bestWord = TRUE)
}
else{
cat("You're welcome!")
}
# cat("Words: ", words[1:5], "\n")
}
checkword <- function(word, dictionary){
word <- paste0("(", paste0(strsplit(word, "")[[1]], collapse = ")|("), ")")
sum(grepl(word, dictionary))
}
mysubset(words, size = 5, bestWord = FALSE)
mysubset(words, size = 5, bestWord = FALSE)
rm(list = ls())
set.seed(13072020)
library(rstudioapi)
# library(rstudioapi)
library(data.table)
library(mets)
# library(haven)
library(tidyverse)
library(survival)
library(doRNG)
library(doParallel)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
# setwd(dirname(getSourceEditorContext()$path))
# setwd("ucph/hdir/SundKonsolidering_BioStatHome/Documents/")
source("functions.R")
setwd(dirname(getSourceEditorContext()$path))
# setwd(dirname(getSourceEditorContext()$path))
# setwd("ucph/hdir/SundKonsolidering_BioStatHome/Documents/")
source("functions.R")
# Parametre -------------------------------------------------------------------------------------------------------
n <- 2000                                                 # Antal obs
lambda <- 1e-4                                            # Konstant baseline hazard
HR <- 1.5                                                 # HR af behandling
HRsex <- 1
# tau <- rexp(n, rate=1/1000)                               # Censorering
tau <- 1000
# lambdaPois <- 3                                           # Parameter til poissonfordeling
D <- 100                                                  # Behandlingslængde
M <- 4
beta <- -log(HR)
starttime <- Sys.time()
ests <- foreach(i = 1:10, .combine = "rbind", .options.RNG = 13102022,  # 05102022
.packages = c("data.table", "survival")) %dorng% {
cat("outer iteration: ", i, "\n")
# W <- rpois(n, lambda = lambdaPois) + 1                         # Antal behandlinger
sex <- rbinom(n, 1, .5)
W <- rpois(n, lambda = 1.5) + 1
# W <- rpois(n, lambda = 2) + 1
W[sex == 1] <- rpois(sum(sex), lambda = 3.5) + 1
# W <- sample(1:4, n, replace = TRUE, prob = c(.1,.2,.2,.5))
# W[sex == 1] <- rpois(sum(sex == 1), lambda = 2) + 1
# UW <- (W == 1) + 2 * (W == 2) + 3 * (W == 3) + 4 * (W >= 4)    # HR for forskellige antal behandlinger
# UW <- pmin(exp(W - 4), 1)
UW <- rep(1, n)
u <- runif(n)
br <- 1 - exp(-lambda * W * D * UW * HR * HRsex ^ sex)
X <- numeric(n)
X[u < br] <- -log(1 - u[u < br]) / (lambda * HR * UW[u < br] * HRsex ^ sex[u < br])
X[u >= br] <- (-log(1 - u[u >= br]) + lambda * UW[u >= br] * HRsex ^ sex[u >= br] * W[u >= br] * D * (1 - HR)) /
(lambda * UW[u >= br] * HRsex ^ sex[u >= br])
# tau <- 1000 #runif(n, 0, 1000)                                       # Censorering
T <- pmin(X, tau)
status <- as.numeric(X <= tau)
obsW <- pmin(W, ceiling(T / D))                                # Vi observerer ikke W for alle
treat <- as.numeric(T <= (D * W))                              # Behandling eller ej ved event tidspunkt
statusW <- 1 - treat                                           # Fortæller os om vi observerer W
statusW[obsW >= M] <- 1                                        # Vi kender niveau hvis de behandles 4 eller flere gange
tmp <- do.call("rbind", lapply(1:n, function(i) {
if (treat[i] == 1){
data.table(id = i, time1 = 0, time2 = T[i], status = status[i], treat = 0,
W = min(obsW[i], M), statusW = statusW[i], sex = sex[i])
}
else{
data.table(id = i, time1 = c(0, D * W[i]), time2 = c(D * W[i], T[i]), status = c(0, status[i]),
treat = c(0, 1), W = min(obsW[i], M), statusW = statusW[i], sex = sex[i])
}
}))
cox1 <- coxph(Surv(time1, time2, status) ~ treat + sex, data = tmp)
cc <- confint(cox1)
cox1_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox1_se <- sqrt(cox1$var[1, 1])
cox2 <- coxph(Surv(time1, time2, status) ~ treat + factor(W) + sex, data = tmp)
cc <- confint(cox2)
cox2_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox2_se <- sqrt(cox2$var[1, 1])
model <- em(Surv(time1, time2, status) ~ treat + factor(W) + sex, data = tmp, M = M, sex = TRUE)
ests1 <- coef(model$model)[1]
SE1 <- emSE(model, sex = TRUE)[1]
model1_cov <- (ests1 - 1.96 * SE1 < beta) & (ests1 + 1.96 * SE1 > beta)
cat("estimate", i, ": ", ests1, "\n")
cat("standard error", i, ": ", SE1, "\n")
model <- em(Surv(time1, time2, status) ~ treat + factor(W), data = tmp, M = M)
ests2 <- coef(model$model)[1]
SE2 <- emSE(model, M = M)[1]
model2_cov <- (ests2 - 1.96 * SE2 < beta) & (ests2 + 1.96 * SE2 > beta)
cat("estimate", i, ": ", ests2, "\n")
cat("standard error", i, ": ", SE2, "\n")
nn <- floor((T - 1e-10) / D)
tmp2 <- do.call("rbind", lapply(1:n, function(i) {
sek <- seq(0, D * nn[i], D)
data.table(id = i, time1 = sek, time2 = c(sek[-1], T[i]), status = c(rep(0, length(sek) - 1), status[i]),
sex = sex[i], treat = c(rep(0, obsW[i]), rep(1, length(sek) - obsW[i])),
W = c(1:obsW[i], rep(obsW[i], length(sek) - obsW[i])))
}))
tmp2$W[tmp2$W >= M] <- M
cox3 <- coxph(Surv(time1, time2, status) ~ treat + sex + factor(W), data = tmp2)
cc <- confint(cox3)
cox3_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox3_se <- sqrt(cox3$var[1, 1])
cat("newCox", i, ": ", coef(cox3)[1], "\n")
c(ests1, SE1, model1_cov, ests2, SE2, model2_cov, coef(cox1)[1], cox1_se, cox1_cov,
coef(cox2)[1], cox2_se, cox2_cov, coef(cox3)[1], cox3_se, cox3_cov)
# c(ests2, SE2, model2_cov, coef(cox1)[1])
# c(ests, SE, coef(cox1)[1], coef(cox2)[1])
# c(ests2, SE2)
}
endtime <- Sys.time()
difftime(endtime, starttime)
apply(ests, 2, mean)
starttime <- Sys.time()
ests <- foreach(i = 1:100, .combine = "rbind", .options.RNG = 13102022,  # 05102022
.packages = c("data.table", "survival")) %dorng% {
cat("outer iteration: ", i, "\n")
# W <- rpois(n, lambda = lambdaPois) + 1                         # Antal behandlinger
sex <- rbinom(n, 1, .5)
W <- rpois(n, lambda = 1.5) + 1
# W <- rpois(n, lambda = 2) + 1
W[sex == 1] <- rpois(sum(sex), lambda = 3.5) + 1
# W <- sample(1:4, n, replace = TRUE, prob = c(.1,.2,.2,.5))
# W[sex == 1] <- rpois(sum(sex == 1), lambda = 2) + 1
# UW <- (W == 1) + 2 * (W == 2) + 3 * (W == 3) + 4 * (W >= 4)    # HR for forskellige antal behandlinger
# UW <- pmin(exp(W - 4), 1)
UW <- rep(1, n)
u <- runif(n)
br <- 1 - exp(-lambda * W * D * UW * HR * HRsex ^ sex)
X <- numeric(n)
X[u < br] <- -log(1 - u[u < br]) / (lambda * HR * UW[u < br] * HRsex ^ sex[u < br])
X[u >= br] <- (-log(1 - u[u >= br]) + lambda * UW[u >= br] * HRsex ^ sex[u >= br] * W[u >= br] * D * (1 - HR)) /
(lambda * UW[u >= br] * HRsex ^ sex[u >= br])
# tau <- 1000 #runif(n, 0, 1000)                                       # Censorering
T <- pmin(X, tau)
status <- as.numeric(X <= tau)
obsW <- pmin(W, ceiling(T / D))                                # Vi observerer ikke W for alle
treat <- as.numeric(T <= (D * W))                              # Behandling eller ej ved event tidspunkt
statusW <- 1 - treat                                           # Fortæller os om vi observerer W
statusW[obsW >= M] <- 1                                        # Vi kender niveau hvis de behandles 4 eller flere gange
tmp <- do.call("rbind", lapply(1:n, function(i) {
if (treat[i] == 1){
data.table(id = i, time1 = 0, time2 = T[i], status = status[i], treat = 0,
W = min(obsW[i], M), statusW = statusW[i], sex = sex[i])
}
else{
data.table(id = i, time1 = c(0, D * W[i]), time2 = c(D * W[i], T[i]), status = c(0, status[i]),
treat = c(0, 1), W = min(obsW[i], M), statusW = statusW[i], sex = sex[i])
}
}))
cox1 <- coxph(Surv(time1, time2, status) ~ treat + sex, data = tmp)
cc <- confint(cox1)
cox1_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox1_se <- sqrt(cox1$var[1, 1])
cox2 <- coxph(Surv(time1, time2, status) ~ treat + factor(W) + sex, data = tmp)
cc <- confint(cox2)
cox2_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox2_se <- sqrt(cox2$var[1, 1])
model <- em(Surv(time1, time2, status) ~ treat + factor(W) + sex, data = tmp, M = M, sex = TRUE)
ests1 <- coef(model$model)[1]
SE1 <- emSE(model, sex = TRUE)[1]
model1_cov <- (ests1 - 1.96 * SE1 < beta) & (ests1 + 1.96 * SE1 > beta)
cat("estimate", i, ": ", ests1, "\n")
cat("standard error", i, ": ", SE1, "\n")
model <- em(Surv(time1, time2, status) ~ treat + factor(W), data = tmp, M = M)
ests2 <- coef(model$model)[1]
SE2 <- emSE(model, M = M)[1]
model2_cov <- (ests2 - 1.96 * SE2 < beta) & (ests2 + 1.96 * SE2 > beta)
cat("estimate", i, ": ", ests2, "\n")
cat("standard error", i, ": ", SE2, "\n")
nn <- floor((T - 1e-10) / D)
tmp2 <- do.call("rbind", lapply(1:n, function(i) {
sek <- seq(0, D * nn[i], D)
data.table(id = i, time1 = sek, time2 = c(sek[-1], T[i]), status = c(rep(0, length(sek) - 1), status[i]),
sex = sex[i], treat = c(rep(0, obsW[i]), rep(1, length(sek) - obsW[i])),
W = c(1:obsW[i], rep(obsW[i], length(sek) - obsW[i])))
}))
tmp2$W[tmp2$W >= M] <- M
cox3 <- coxph(Surv(time1, time2, status) ~ treat + sex + factor(W), data = tmp2)
cc <- confint(cox3)
cox3_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox3_se <- sqrt(cox3$var[1, 1])
cat("newCox", i, ": ", coef(cox3)[1], "\n")
c(ests1, SE1, model1_cov, ests2, SE2, model2_cov, coef(cox1)[1], cox1_se, cox1_cov,
coef(cox2)[1], cox2_se, cox2_cov, coef(cox3)[1], cox3_se, cox3_cov)
# c(ests2, SE2, model2_cov, coef(cox1)[1])
# c(ests, SE, coef(cox1)[1], coef(cox2)[1])
# c(ests2, SE2)
}
endtime <- Sys.time()
difftime(endtime, starttime)
apply(ests, 2, mean)
# Parametre -------------------------------------------------------------------------------------------------------
n <- 4000                                                 # Antal obs
.25 / sqrt(2)
starttime <- Sys.time()
ests <- foreach(i = 1:100, .combine = "rbind", .options.RNG = 13102022,  # 05102022
.packages = c("data.table", "survival")) %dorng% {
cat("outer iteration: ", i, "\n")
# W <- rpois(n, lambda = lambdaPois) + 1                         # Antal behandlinger
sex <- rbinom(n, 1, .5)
W <- rpois(n, lambda = 1.5) + 1
# W <- rpois(n, lambda = 2) + 1
W[sex == 1] <- rpois(sum(sex), lambda = 3.5) + 1
# W <- sample(1:4, n, replace = TRUE, prob = c(.1,.2,.2,.5))
# W[sex == 1] <- rpois(sum(sex == 1), lambda = 2) + 1
# UW <- (W == 1) + 2 * (W == 2) + 3 * (W == 3) + 4 * (W >= 4)    # HR for forskellige antal behandlinger
# UW <- pmin(exp(W - 4), 1)
UW <- rep(1, n)
u <- runif(n)
br <- 1 - exp(-lambda * W * D * UW * HR * HRsex ^ sex)
X <- numeric(n)
X[u < br] <- -log(1 - u[u < br]) / (lambda * HR * UW[u < br] * HRsex ^ sex[u < br])
X[u >= br] <- (-log(1 - u[u >= br]) + lambda * UW[u >= br] * HRsex ^ sex[u >= br] * W[u >= br] * D * (1 - HR)) /
(lambda * UW[u >= br] * HRsex ^ sex[u >= br])
# tau <- 1000 #runif(n, 0, 1000)                                       # Censorering
T <- pmin(X, tau)
status <- as.numeric(X <= tau)
obsW <- pmin(W, ceiling(T / D))                                # Vi observerer ikke W for alle
treat <- as.numeric(T <= (D * W))                              # Behandling eller ej ved event tidspunkt
statusW <- 1 - treat                                           # Fortæller os om vi observerer W
statusW[obsW >= M] <- 1                                        # Vi kender niveau hvis de behandles 4 eller flere gange
tmp <- do.call("rbind", lapply(1:n, function(i) {
if (treat[i] == 1){
data.table(id = i, time1 = 0, time2 = T[i], status = status[i], treat = 0,
W = min(obsW[i], M), statusW = statusW[i], sex = sex[i])
}
else{
data.table(id = i, time1 = c(0, D * W[i]), time2 = c(D * W[i], T[i]), status = c(0, status[i]),
treat = c(0, 1), W = min(obsW[i], M), statusW = statusW[i], sex = sex[i])
}
}))
cox1 <- coxph(Surv(time1, time2, status) ~ treat + sex, data = tmp)
cc <- confint(cox1)
cox1_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox1_se <- sqrt(cox1$var[1, 1])
cox2 <- coxph(Surv(time1, time2, status) ~ treat + factor(W) + sex, data = tmp)
cc <- confint(cox2)
cox2_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox2_se <- sqrt(cox2$var[1, 1])
model <- em(Surv(time1, time2, status) ~ treat + factor(W) + sex, data = tmp, M = M, sex = TRUE)
ests1 <- coef(model$model)[1]
SE1 <- emSE(model, sex = TRUE)[1]
model1_cov <- (ests1 - 1.96 * SE1 < beta) & (ests1 + 1.96 * SE1 > beta)
cat("estimate", i, ": ", ests1, "\n")
cat("standard error", i, ": ", SE1, "\n")
model <- em(Surv(time1, time2, status) ~ treat + factor(W), data = tmp, M = M)
ests2 <- coef(model$model)[1]
SE2 <- emSE(model, M = M)[1]
model2_cov <- (ests2 - 1.96 * SE2 < beta) & (ests2 + 1.96 * SE2 > beta)
cat("estimate", i, ": ", ests2, "\n")
cat("standard error", i, ": ", SE2, "\n")
nn <- floor((T - 1e-10) / D)
tmp2 <- do.call("rbind", lapply(1:n, function(i) {
sek <- seq(0, D * nn[i], D)
data.table(id = i, time1 = sek, time2 = c(sek[-1], T[i]), status = c(rep(0, length(sek) - 1), status[i]),
sex = sex[i], treat = c(rep(0, obsW[i]), rep(1, length(sek) - obsW[i])),
W = c(1:obsW[i], rep(obsW[i], length(sek) - obsW[i])))
}))
tmp2$W[tmp2$W >= M] <- M
cox3 <- coxph(Surv(time1, time2, status) ~ treat + sex + factor(W), data = tmp2)
cc <- confint(cox3)
cox3_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox3_se <- sqrt(cox3$var[1, 1])
cat("newCox", i, ": ", coef(cox3)[1], "\n")
c(ests1, SE1, model1_cov, ests2, SE2, model2_cov, coef(cox1)[1], cox1_se, cox1_cov,
coef(cox2)[1], cox2_se, cox2_cov, coef(cox3)[1], cox3_se, cox3_cov)
}
endtime <- Sys.time()
difftime(endtime, starttime)
apply(ests, 2, mean)
starttime <- Sys.time()
ests <- foreach(i = 1:10, .combine = "rbind", .options.RNG = 13102022,  # 05102022
.packages = c("data.table", "survival")) %dorng% {
cat("outer iteration: ", i, "\n")
sex <- rbinom(n, 1, .5)
W <- rpois(n, lambda = 1.5) + 1
W[sex == 1] <- rpois(sum(sex), lambda = 3.5) + 1
UW <- rep(1, n)
u <- runif(n)
br <- 1 - exp(-lambda * W * D * UW * HR * HRsex ^ sex)
X <- numeric(n)
X[u < br] <- -log(1 - u[u < br]) / (lambda * HR * UW[u < br] * HRsex ^ sex[u < br])
X[u >= br] <- (-log(1 - u[u >= br]) + lambda * UW[u >= br] * HRsex ^ sex[u >= br] * W[u >= br] * D * (1 - HR)) /
(lambda * UW[u >= br] * HRsex ^ sex[u >= br])
T <- pmin(X, tau)
status <- as.numeric(X <= tau)
obsW <- pmin(W, ceiling(T / D))                                # Vi observerer ikke W for alle
treat <- as.numeric(T <= (D * W))                              # Behandling eller ej ved event tidspunkt
statusW <- 1 - treat                                           # Fortæller os om vi observerer W
statusW[obsW >= M] <- 1                                        # Vi kender niveau hvis de behandles 4 eller flere gange
tmp <- do.call("rbind", lapply(1:n, function(i) {
if (treat[i] == 1){
data.table(id = i, time1 = 0, time2 = T[i], status = status[i], treat = 0,
W = min(obsW[i], M), statusW = statusW[i], sex = sex[i])
}
else{
data.table(id = i, time1 = c(0, D * W[i]), time2 = c(D * W[i], T[i]), status = c(0, status[i]),
treat = c(0, 1), W = min(obsW[i], M), statusW = statusW[i], sex = sex[i])
}
}))
cox1 <- coxph(Surv(time1, time2, status) ~ treat + sex, data = tmp)
cc <- confint(cox1)
cox1_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox1_se <- sqrt(cox1$var[1, 1])
cox2 <- coxph(Surv(time1, time2, status) ~ treat + factor(W) + sex, data = tmp)
cc <- confint(cox2)
cox2_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox2_se <- sqrt(cox2$var[1, 1])
model <- em(Surv(time1, time2, status) ~ treat + factor(W) + sex, data = tmp, M = M, sex = TRUE)
ests1 <- coef(model$model)[1]
SE1 <- emSE(model, sex = TRUE)[1]
model1_cov <- (ests1 - 1.96 * SE1 < beta) & (ests1 + 1.96 * SE1 > beta)
cat("estimate", i, ": ", ests1, "\n")
cat("standard error", i, ": ", SE1, "\n")
model <- em(Surv(time1, time2, status) ~ treat + factor(W), data = tmp, M = M)
ests2 <- coef(model$model)[1]
SE2 <- emSE(model, M = M)[1]
model2_cov <- (ests2 - 1.96 * SE2 < beta) & (ests2 + 1.96 * SE2 > beta)
cat("estimate", i, ": ", ests2, "\n")
cat("standard error", i, ": ", SE2, "\n")
nn <- floor((T - 1e-10) / D)
tmp2 <- do.call("rbind", lapply(1:n, function(i) {
sek <- seq(0, D * nn[i], D)
data.table(id = i, time1 = sek, time2 = c(sek[-1], T[i]), status = c(rep(0, length(sek) - 1), status[i]),
sex = sex[i], treat = c(rep(0, obsW[i]), rep(1, length(sek) - obsW[i])),
W = c(1:obsW[i], rep(obsW[i], length(sek) - obsW[i])))
}))
tmp2$W[tmp2$W >= M] <- M
cox3 <- coxph(Surv(time1, time2, status) ~ treat + sex + factor(W), data = tmp2)
cc <- confint(cox3)
cox3_cov <- cc[1, 1] < beta & cc[1, 2] > beta
cox3_se <- sqrt(cox3$var[1, 1])
cat("newCox", i, ": ", coef(cox3)[1], "\n")
c(ests1, SE1, model1_cov, ests2, SE2, model2_cov, coef(cox1)[1], cox1_se, cox1_cov,
coef(cox2)[1], cox2_se, cox2_cov, coef(cox3)[1], cox3_se, cox3_cov)
}
endtime <- Sys.time()
difftime(endtime, starttime)
apply(ests, 2, mean)
dd <- readRDS("simresults_null.rds")
dd
apply(dd,2,mean)
apply(dd$ests,2,mean)
dd$time
install.packages("Epi")
library(Epi)
